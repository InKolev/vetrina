@page "/shopping-list"
@using System.Text
@using Vetrina.Autogen.API.Client.Contracts
@using Vetrina.Client.Services

@inject ApplicationState applicationState;
@inject IClipboardService clipboardService;
@inject ISnackbar snackbarService;
@inject IDialogService dialogService;
@inject IShoppingListRepository shoppingListRepository;
@inject IShoppingListService shoppingListService;

<MudContainer Class="mt-6">
    <MudText Align="Align.Center" Typo="Typo.h4" GutterBottom="true">
        Koшница
    </MudText>
    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
            <MudTable Class="mt-4" Virtualize="true" SelectedItems="SelectedItems" Dense="true" RowsPerPage="25" Items="this.shoppingList" MultiSelection="true" Hover="true" SortLabel="Сортирай по" AllowUnsorted="false" Elevation="0">
                <NoRecordsContent>
                    <MudText Typo="Typo.h5" Align="Align.Center">
                        Кошницата е празна
                    </MudText>
                </NoRecordsContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="SortByProductDescription()">Продукт</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="SortByProductSinglePrice()">Цена</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="SortByProductQuantity()">Количество</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="SortByProductTotalPrice()">Обща сума</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="SortByStore()">Магазин</MudTableSortLabel></MudTh>
                    <MudTh>Премахни</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Продукт">@context.Promotion.DescriptionRaw</MudTd>
                    <MudTd DataLabel="Цена">@context.Promotion.Price</MudTd>
                    <MudTd DataLabel="Количество">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => this.shoppingListService.IncreaseQuantityInShoppingList(context.Promotion)"/>
                        @context.Quantity
                        <MudIconButton Icon="@Icons.Material.Filled.Remove" Size="Size.Small" OnClick="() => this.shoppingListService.DecreaseQuantityInShoppingList(context.Promotion)"/>
                    </MudTd>
                    <MudTd DataLabel="Обща сума">@(Math.Round(context.Quantity * context.Promotion.Price, 2, MidpointRounding.ToEven))</MudTd>
                    <MudTd DataLabel="Магазин">@context.Promotion.Store.ToString()</MudTd>
                    <MudTd DataLabel="Премахни">
                        <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" Color="Color.Error" aria-label="Премахни" OnClick="() => TryRemoveFromShoppingList(context.Promotion)"/>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" RowsPerPageString="Брой продукти на страница" InfoFormat="{first_item} - {last_item} от общо {all_items}" PageSizeOptions="new int[] { 10, 25, 50, 100 }"/>
                </PagerContent>
            </MudTable>
        </MudItem>

        @if (this.shoppingList.Any())
        {
            @*<MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12"></MudItem>*@

            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                <MudGrid>
                    <MudItem xs="12" sm="12" md="6" lg="4" xl="4" xxl="4">
                        <MudPaper Elevation="2" Class="mx-4">
                            <MudButton Class="pa-4" Variant="Variant.Text" FullWidth="true" Color="Color.Transparent" Size="Size.Medium" OnClick="CopySelectedShoppingItemsToClipboard">
                                Копирай избраните
                            </MudButton>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="4" xl="4" xxl="4">
                        <MudPaper Elevation="2" Class="mx-4">
                            <MudButton Class="pa-4" Variant="Variant.Text" FullWidth="true" Color="Color.Surface" Size="Size.Medium" OnClick="CopyEntireShoppingListToClipboard">
                                Копирай всички
                            </MudButton>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="6" lg="4" xl="4" xxl="4">
                        <MudPaper Elevation="2" Class="mx-4">
                            <MudButton Class="pa-4" Variant="Variant.Text" FullWidth="true" Color="Color.Warning" StartIcon="@Icons.Material.Filled.ClearAll" Size="Size.Medium" OnClick="ClearShoppingList">
                                Изчисти кошницата
                            </MudButton>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<ShoppingListItem> shoppingList = new List<ShoppingListItem>();

    public HashSet<ShoppingListItem> SelectedItems = new HashSet<ShoppingListItem>();

    protected override async Task OnInitializedAsync()
    {
        this.applicationState.ShoppingListChanged += HandleStateHasChanged;
        this.applicationState.ThemeColorChanged += StateHasChanged;

        this.shoppingList = await this.shoppingListRepository.GetAllItemsAsync();

        Console.WriteLine($"{nameof(ShoppingList)} initialized");
    }

    public async Task ClearShoppingList()
    {
        var dialogReference = this.dialogService.Show<ConfirmActionDialog>("Искате ли да изчистите кошницата?");
        var dialogResult = await dialogReference.Result;

        if (!dialogResult.Cancelled)
        {
            await this.shoppingListService.ClearShoppingList();
        }
    }

    private async Task TryRemoveFromShoppingList(Promotion promotion)
    {
        var dialogReference = this.dialogService.Show<ConfirmActionDialog>("Искате ли да премахнете продукта от кошницата?");
        var dialogResult = await dialogReference.Result;

        if (!dialogResult.Cancelled)
        {
            await shoppingListService.RemoveFromShoppingList(promotion);
        }
    }

    public void CopySelectedShoppingItemsToClipboard()
    {
        if (!this.SelectedItems.Any())
        {
            this.snackbarService.Clear();
            this.snackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbarService.Configuration.SnackbarVariant = Variant.Outlined;
            this.snackbarService.Add("Не сте избрали продукти от кошницата.", Severity.Warning);

            return;
        }

        var itemsByStore = this.SelectedItems.GroupBy(x => x.Promotion.Store);

        var basketBuilder = new StringBuilder();

        var totalBasketPrice = 0d;

        foreach (var storeGroup in itemsByStore)
        {
            var storeName = storeGroup.Key.ToString();
            var totalStorePrice = 0d;
            basketBuilder.AppendLine(storeName);

            foreach (var item in storeGroup)
            {
                var singleItemPrice = item.Promotion.Price;
                var totalItemPrice = Math.Round(item.Quantity * item.Promotion.Price, 2, MidpointRounding.ToEven);

                basketBuilder.AppendLine($"{item.Quantity} x {item.Promotion.DescriptionRaw.ReplaceNewLinesWithSingleWhitespace()} ({singleItemPrice} BGN) = {totalItemPrice} BGN");

                totalBasketPrice += totalItemPrice;
                totalStorePrice += totalItemPrice;
            }

            basketBuilder.AppendLine($"Обща сума за магазин {storeName} - {Math.Round(totalStorePrice, 2, MidpointRounding.ToEven)} BGN");
            basketBuilder.AppendLine($"Общ брой продукти за магазин {storeName} - {storeGroup.Count()}.");
            basketBuilder.AppendLine(Environment.NewLine);
        }

        basketBuilder.AppendLine($"Обща сума за цялата кошница - {Math.Round(totalBasketPrice, 2, MidpointRounding.ToEven)} BGN");

        this.clipboardService.WriteTextAsync(basketBuilder.ToString());

        this.snackbarService.Clear();
        this.snackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        this.snackbarService.Configuration.SnackbarVariant = Variant.Outlined;
        this.snackbarService.Add("Списъкът с продукти от кошницата беше успешно копиран.", Severity.Success);
    }

    public async Task CopyEntireShoppingListToClipboard()
    {
        var allShoppingItems = await this.shoppingListRepository.GetAllItemsAsync();
        var shoppingItemsGroupedByStore = allShoppingItems.GroupBy(x => x.Promotion.Store);

        var basketBuilder = new StringBuilder();

        var totalBasketPrice = 0d;

        foreach (var storeGroup in shoppingItemsGroupedByStore)
        {
            var storeName = storeGroup.Key.ToString();
            var totalStorePrice = 0d;
            basketBuilder.AppendLine(storeName);
            foreach (var item in storeGroup)
            {
                var singleItemPrice = item.Promotion.PriceRaw;
                var totalItemPrice = item.Quantity * item.Promotion.PriceRaw.ToDouble();

                basketBuilder.AppendLine($"{item.Quantity} x {item.Promotion.DescriptionRaw.ReplaceNewLinesWithSingleWhitespace()} ({singleItemPrice} BGN) = {totalItemPrice} BGN");

                totalBasketPrice += totalItemPrice;
                totalStorePrice += totalItemPrice;
            }

            basketBuilder.AppendLine($"Обща сума за магазин {storeName} - {Math.Round(totalStorePrice, 2, MidpointRounding.ToEven)} BGN.");
            basketBuilder.AppendLine($"Общ брой продукти за магазин {storeName} - {storeGroup.Count()}.");
            basketBuilder.AppendLine(Environment.NewLine);
        }

        basketBuilder.AppendLine($"Обща сума за цялата кошница - {Math.Round(totalBasketPrice, 2, MidpointRounding.ToEven)} BGN");

        await this.clipboardService.WriteTextAsync(basketBuilder.ToString());

        this.snackbarService.Clear();
        this.snackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        this.snackbarService.Configuration.SnackbarVariant = Variant.Outlined;
        this.snackbarService.Add("Списъкът от кошницата беше успешно копиран.", Severity.Success);
    }

    private static Func<ShoppingListItem, object> SortByProductDescription() =>
        shoppingListItem => shoppingListItem.Promotion.DescriptionRaw;

    private static Func<ShoppingListItem, object> SortByProductSinglePrice() =>
        shoppingListItem => shoppingListItem.Promotion.Price;

    private static Func<ShoppingListItem, object> SortByProductQuantity() =>
        shoppingListItem => shoppingListItem.Quantity;

    private static Func<ShoppingListItem, object> SortByProductTotalPrice() =>
        shoppingListItem => shoppingListItem.Quantity * shoppingListItem.Promotion.Price;

    private static Func<ShoppingListItem, object> SortByStore() =>
        shoppingListItem => shoppingListItem.Promotion.Store;

    public void Dispose()
    {
        this.applicationState.ThemeColorChanged -= StateHasChanged;
        this.applicationState.ShoppingListChanged -= HandleStateHasChanged;

        Console.WriteLine($"{nameof(ShoppingList)} disposed");
    }

    public void HandleStateHasChanged(List<ShoppingListItem> shoppingListState)
    {
        this.shoppingList = shoppingListState;
        StateHasChanged();
    }
}
