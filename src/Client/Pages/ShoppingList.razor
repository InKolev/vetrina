@page "/shopping-list"
@using System.Text
@using Vetrina.Client.Services

@inject ApplicationState applicationState;
@inject IClipboardService clipboardService;
@inject ISnackbar snackbarService;
@inject IDialogService dialogService;

<MudGrid>
    <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
        <MudTable Virtualize="true" SelectedItems="SelectedItems" RowsPerPage="25" Items="@this.applicationState.ShoppingList" MultiSelection="true" Hover="true" SortLabel="Сортирай по" AllowUnsorted="false" Elevation="0">
            <NoRecordsContent>
                <MudText Typo="Typo.h5" Align="Align.Center">
                    Кошницата е празна
                </MudText>
            </NoRecordsContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="SortByProductDescription()">Продукт</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="SortByProductSinglePrice()">Цена</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="SortByProductQuantity()">Количество</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="SortByProductTotalPrice()">Обща сума</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="SortByStore()">Магазин</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Продукт">@context.Promotion.DescriptionRaw</MudTd>
                <MudTd DataLabel="Цена">@context.Promotion.Price</MudTd>
                <MudTd DataLabel="Количество">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => this.applicationState.IncreaseQuantityInShoppingList(context.Promotion)" />
                    @context.Quantity
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="() => this.applicationState.DecreaseQuantityInShoppingList(context.Promotion)" />
                </MudTd>
                <MudTd DataLabel="Обща сума">@(Math.Round(context.Quantity * context.Promotion.Price, 2, MidpointRounding.ToEven))</MudTd>
                <MudTd DataLabel="Магазин">@context.Promotion.Store.ToString()</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" RowsPerPageString="Брой продукти на страница" InfoFormat="{first_item} - {last_item} от общо {all_items}" PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
        </MudTable>
    </MudItem>
    @if (this.applicationState.ShoppingList.Any())
    {
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
            <MudGrid>
                <MudItem xs="12" sm="12" md="6" lg="4" xl="4" xxl="4">
                    <MudPaper Elevation="2" Class="mx-4">
                        <MudButton Class="pa-4" Variant="Variant.Text" FullWidth="true" Color="Color.Transparent" Size="Size.Medium" OnClick="CopySelectedShoppingItemsToClipboard">
                            Копирай избраните
                        </MudButton>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="4" xl="4" xxl="4">
                    <MudPaper Elevation="2" Class="mx-4">
                        <MudButton Class="pa-4" Variant="Variant.Text" FullWidth="true" Color="Color.Surface" Size="Size.Medium" OnClick="CopyEntireShoppingListToClipboard">
                            Копирай всички
                        </MudButton>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="4" xl="4" xxl="4">
                    <MudPaper Elevation="2" Class="mx-4">
                        <MudButton Class="pa-4" Variant="Variant.Text" FullWidth="true" Color="Color.Warning" StartIcon="@Icons.Material.Filled.ClearAll" Size="Size.Medium" OnClick="ClearShoppingList">
                            Изчисти кошницата
                        </MudButton>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
    }
</MudGrid>

@code {

    public HashSet<ShoppingListItem> SelectedItems = new HashSet<ShoppingListItem>();

    protected override Task OnInitializedAsync()
    {
        this.applicationState.ShoppingListChanged += StateHasChanged;
        this.applicationState.ThemeColorChanged += StateHasChanged;

        return Task.CompletedTask;
    }

    public async Task ClearShoppingList()
    {
        var dialogReference = this.dialogService.Show<ConfirmActionDialog>("Искате ли да изчистите кошницата?");
        var dialogResult = await dialogReference.Result;

        if (!dialogResult.Cancelled)
        {
            this.applicationState.ClearShoppingList();
        }
    }

    public void CopySelectedShoppingItemsToClipboard()
    {
        var itemsByStore = this.SelectedItems.GroupBy(x => x.Promotion.Store);

        var basketBuilder = new StringBuilder();

        var totalBasketPrice = 0d;

        foreach (var storeGroup in itemsByStore)
        {
            var storeName = storeGroup.Key.ToString();
            var totalStorePrice = 0d;
            basketBuilder.AppendLine(storeName);

            foreach (var item in storeGroup)
            {
                var singleItemPrice = item.Promotion.Price;
                var totalItemPrice = Math.Round(item.Quantity * item.Promotion.Price, 2, MidpointRounding.ToEven);

                basketBuilder.AppendLine($"{item.Quantity} x {item.Promotion.DescriptionRaw.ReplaceNewLinesWithSingleWhitespace()} ({singleItemPrice} BGN) = {totalItemPrice} BGN");

                totalBasketPrice += totalItemPrice;
                totalStorePrice += totalItemPrice;
            }

            basketBuilder.AppendLine($"Обща сума за магазин {storeName} - {Math.Round(totalStorePrice, 2, MidpointRounding.ToEven)} BGN");
            basketBuilder.AppendLine(Environment.NewLine);
        }

        basketBuilder.AppendLine($"Обща сума за цялата кошница - {Math.Round(totalBasketPrice, 2, MidpointRounding.ToEven)} BGN");

        this.clipboardService.WriteTextAsync(basketBuilder.ToString());

        this.snackbarService.Clear();
        this.snackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        this.snackbarService.Configuration.SnackbarVariant = Variant.Outlined;
        this.snackbarService.Add("Списъкът от кошницата беше успешно копиран.", Severity.Success);
    }

    public void CopyEntireShoppingListToClipboard()
    {
        var itemsByStore = this.applicationState.ShoppingList.GroupBy(x => x.Promotion.Store);

        var basketBuilder = new StringBuilder();

        var totalBasketPrice = 0d;

        foreach (var storeGroup in itemsByStore)
        {
            var storeName = storeGroup.Key.ToString();
            var totalStorePrice = 0d;
            basketBuilder.AppendLine(storeName);
            foreach (var item in storeGroup)
            {
                var singleItemPrice = item.Promotion.PriceRaw;
                var totalItemPrice = item.Quantity * item.Promotion.PriceRaw.ToDouble();

                basketBuilder.AppendLine($"{item.Quantity} x {item.Promotion.DescriptionRaw.ReplaceNewLinesWithSingleWhitespace()} ({singleItemPrice} BGN) = {totalItemPrice} BGN");

                totalBasketPrice += totalItemPrice;
                totalStorePrice += totalItemPrice;
            }

            basketBuilder.AppendLine($"Обща сума за магазин {storeName} - {Math.Round(totalStorePrice, 2, MidpointRounding.ToEven)} BGN");
            basketBuilder.AppendLine(Environment.NewLine);
        }

        basketBuilder.AppendLine($"Обща сума за цялата кошница - {Math.Round(totalBasketPrice, 2, MidpointRounding.ToEven)} BGN");

        this.clipboardService.WriteTextAsync(basketBuilder.ToString());

        this.snackbarService.Clear();
        this.snackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        this.snackbarService.Configuration.SnackbarVariant = Variant.Outlined;
        this.snackbarService.Add("Списъкът от кошницата беше успешно копиран.", Severity.Success);
    }

    private static Func<ShoppingListItem, object> SortByProductDescription() =>
        shoppingListItem => shoppingListItem.Promotion.DescriptionRaw;

    private static Func<ShoppingListItem, object> SortByProductSinglePrice() =>
        shoppingListItem => shoppingListItem.Promotion.Price;

    private static Func<ShoppingListItem, object> SortByProductQuantity() =>
        shoppingListItem => shoppingListItem.Quantity;

    private static Func<ShoppingListItem, object> SortByProductTotalPrice() =>
        shoppingListItem => shoppingListItem.Quantity * shoppingListItem.Promotion.Price;

    private static Func<ShoppingListItem, object> SortByStore() =>
        shoppingListItem => shoppingListItem.Promotion.Store;

    public void Dispose()
    {
        this.applicationState.ThemeColorChanged -= StateHasChanged;
        this.applicationState.ShoppingListChanged -= StateHasChanged;
    }
}
