@page "/promotions/view/{PromotionId:int}"

@using Vetrina.Autogen.API.Client.Contracts
@using Vetrina.Client.Services
@using Blazored.LocalStorage

@inject ApplicationState applicationState;
@inject ISnackbar snackbarService;
@inject ILocalStorageService localStorageService;
@inject IDialogService dialogService;
@inject IPromotionsClient promotionsClient

@if (GetPromotionResponse.Type == GetPromotionResponseType.NotFound)
{
    <MudText Typo="Typo.h3" Align="Align.Center">
        Promotion with the provided Id could not be found.
    </MudText>
}
else if (GetPromotionResponse.Type == GetPromotionResponseType.Successful)
{
    <MudCard Class="mx-4" Style="width: 300px;">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Elevation="2" Size="Size.Large"
                           Square="@IsStoreLogoRectangular(Promotion.Store)"
                           Image="@($"/resources/{Promotion.Store}.svg")">
                </MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1" Align="Align.Left">
                    <strong>@Promotion.DescriptionRaw</strong>
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardMedia Image="@Promotion.ImageUrl" Height="500" Class="promotion-card-large"/>
        <MudCardContent>
            @if (this.applicationState.ShoppingList.Any(x => x.Promotion.Id == Promotion.Id))
            {
                <MudButton OnClick="() => TryRemoveFromShoppingList(Promotion)"
                           StartIcon="@Icons.Material.Outlined.Remove"
                           FullWidth="true"
                           Size="Size.Large"
                           Color="Color.Warning"
                           Variant="Variant.Text"
                           Style="box-shadow: 0px 0px 10px rgba(245, 148, 39, 0.8);">
                    <strong>@($"{Promotion.Price} BGN")</strong>
                </MudButton>
            }
            else
            {
                <MudButton OnClick="() => AddToCart(Promotion)"
                           StartIcon="@Icons.Material.Outlined.Add"
                           FullWidth="true"
                           Size="Size.Large"
                           Color="Color.Transparent"
                           Variant="Variant.Text"
                           Style="box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);"
                           Class="@applicationState.TossToCartClass">
                    <strong>@($"{Promotion.Price} BGN")</strong>
                    <span class="cart-item"></span>
                </MudButton>
            }
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    public int PromotionId { get; set; }

    public Promotion Promotion { get; set; }

    public GetPromotionResponse GetPromotionResponse { get; set; } = new GetPromotionResponse()
    {
        Type = GetPromotionResponseType.NotFound
    };

    protected override async Task OnInitializedAsync()
    {
        var response = await this.promotionsClient.GetPromotionAsync(this.PromotionId);

        if (response.Type == GetPromotionResponseType.Successful)
        {
            this.Promotion = response.Promotion;
        }
     
        this.GetPromotionResponse = response;
    }

    private bool IsStoreLogoRectangular(Store store)
    {
        return store == Store.Kaufland;
    }

    private async Task TryRemoveFromShoppingList(Promotion promotion)
    {
        var dialogReference = this.dialogService.Show<ConfirmActionDialog>("Искате ли да премахнете продукта от кошницата?");
        var dialogResult = await dialogReference.Result;

        if (!dialogResult.Cancelled)
        {
            applicationState.RemoveFromShoppingList(promotion);
        }
    }

    private async Task AddToCart(Promotion promotion)
    {
        await applicationState.AddPromotionalItemToShoppingList(promotion);
    }
}
