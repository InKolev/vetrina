@page "/register"

@using Microsoft.AspNetCore.Components.Authorization
@using InputType = MudBlazor.InputType
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components
@using Vetrina.Autogen.API.Client.Contracts
@using Vetrina.Client.Constants

@inject ISnackbar snackbarService;
@inject IAuthenticationClient authenticationClient;
@inject ILocalStorageService localStorage;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager;

<div style="margin-bottom: 150px;"></div>

<MudContainer Class="d-flex justify-center align-center">
    <MudCard Class="align-self-center" Style="width: 500px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Class="align-center" Typo="Typo.h5">Register user</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <EditForm Model="@registerUserRequest" OnValidSubmit="@OnValidSubmitHandler">
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudSelect @bind-Value="registerUserRequest.Title"
                           For="@(() => registerUserRequest.Title)"
                           T="string"
                           Label="Title"
                           AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Mr")" />
                    <MudSelectItem Value="@("Mrs")" />
                    <MudSelectItem Value="@("Miss")" />
                </MudSelect>

                <MudTextField @bind-Value="registerUserRequest.FirstName"
                              For="@(() => registerUserRequest.FirstName)"
                              Label="First name" />

                <MudTextField @bind-Value="registerUserRequest.LastName"
                              For="@(() => registerUserRequest.LastName)"
                              Label="Last name" />

                <MudTextField @bind-Value="registerUserRequest.Email"
                              For="@(() => registerUserRequest.Email)"
                              Label="Email" />

                <MudTextField @bind-Value="registerUserRequest.Password"
                              For="@(() => registerUserRequest.Password)"
                              Label="Password"
                              HelperText="Choose a strong password"
                              InputType="InputType.Password" />

                <MudTextField @bind-Value="registerUserRequest.ConfirmPassword"
                              For="@(() => registerUserRequest.ConfirmPassword)"
                              Label="Confirm password"
                              HelperText="Confirm the password"
                              InputType="InputType.Password" />

                <MudCheckBox @bind-Checked="@registerUserRequest.AcceptTerms"
                             For="@(() => registerUserRequest.AcceptTerms)">
                    I have read and agree to the terms presented in the
                    <MudLink Href="#" Underline="Underline.Always">Terms and Conditions agreement</MudLink>
                </MudCheckBox>
            </MudCardContent>

            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Disabled="disableRegistration"
                           Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </EditForm>
    </MudCard>
</MudContainer>
@code {
    private bool disableRegistration = false;
    readonly RegisterUserRequest registerUserRequest = new RegisterUserRequest
    {
        Title = "Mr",
        AcceptTerms = true,
        FirstName = "Ivan",
        LastName = "Kolev",
        Password = "123123",
        ConfirmPassword = "123123",
        Email = "in.kolev.b@gmail.com"
    };

    private async Task OnValidSubmitHandler()
    {
        this.snackbarService.Add(
            "Registration form valid. Attempting to register...",
            Severity.Info);

        RegisterUserResponse registerUserResponse = null;
        try
        {
            registerUserResponse = await authenticationClient.RegisterAsync(this.registerUserRequest);
        }
        catch (SwaggerException<RegisterUserResponse> e)
        {
            this.snackbarService.Add(
                $"Login attempt failed. Reason: {e.Result.Details}.",
                Severity.Error);

            return;
        }
        catch (Exception e)
        {
            this.snackbarService.Add(
                $"Register attempt failed. Reason: {e.Message}.",
                Severity.Error);

            return;
        }

        if (registerUserResponse.Type == RegisterUserResponseType.Successful)
        {
            //await localStorage.SetItemAsync(
            //    AuthenticationConstants.LocalStorageAuthTokenKey,
            //    registerUserResponse.Токен);

            //((CustomAuthenticationStateProvider)authenticationStateProvider)
            //    .NotifyUserAuthenticated(
            //        this.registerUserRequest.UserName);

            //httpClient.DefaultRequestHeaders.Authorization =
            //    new AuthenticationHeaderValue(
            //        AuthenticationConstants.AuthorizationHeaderScheme,);

            this.snackbarService.Add(
                "Successfully registered user. Confirmation link has been sent to your email.",
                Severity.Success,
                options => options.RequireInteraction = true);

            this.navigationManager.NavigateTo(
                NavigationConstants.Home);
        }
        else
        {
            this.snackbarService.Add(
                $"Failed to register user. Reason: {registerUserResponse.Details}.",
                Severity.Warning);
        }
    }
}
