@page "/promotions/browse"

@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Vetrina.Autogen.API.Client.Contracts
@using Vetrina.Client.Services

@inject ApplicationState applicationState;
@inject ISnackbar snackbarService;
@inject ILocalStorageService localStorageService;
@inject IDialogService dialogService;
@inject IPromotionsClient promotionsClient

<MudGrid>
    <Virtualize Context="promotion" ItemsProvider="@FetchPromotions" OverscanCount="8" ItemSize="400">
        <MudItem sm="6" md="4" lg="4" xl="3" xxl="2">
            <MudCard Class="mx-4">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Elevation="2" Size="Size.Large"
                                   Square="@IsStoreLogoRectangular(promotion.Store)"
                                   Image="@($"/resources/{promotion.Store}.svg")">
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1" Align="Align.Left">
                            <strong>@promotion.DescriptionRaw</strong>
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardMedia Image="@promotion.ImageUrl" Height="220" />
                <MudCardContent>
                    @if (this.applicationState.ShoppingList.Any(x => x.Promotion.Id == promotion.Id))
                    {
                        <MudButton OnClick="() => TryRemoveFromShoppingList(promotion)"
                                   StartIcon="@Icons.Material.Outlined.Remove"
                                   FullWidth="true"
                                   Size="Size.Large"
                                   Color="Color.Warning"
                                   Variant="Variant.Text"
                                   Style="box-shadow: 0px 0px 10px rgba(245, 148, 39, 0.8);">
                            <strong>@($"{promotion.Price} BGN")</strong>
                        </MudButton>
                    }
                    else
                    {
                        <MudButton OnClick="() => AddToCart(promotion)"
                                   StartIcon="@Icons.Material.Outlined.Add"
                                   FullWidth="true"
                                   Size="Size.Large"
                                   Color="Color.Transparent"
                                   Variant="Variant.Text"
                                   Style="box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);"
                                   Class="@applicationState.TossToCartClass">
                            <strong>@($"{promotion.Price} BGN")</strong>
                            <span class="cart-item"></span>
                        </MudButton>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </Virtualize>
</MudGrid>

@code {
    public List<Promotion> Promotions { get; set; } = new List<Promotion>();

    public BrowsePromotionsRequest BrowsePromotionsRequest { get; set; } = new BrowsePromotionsRequest
    {
        Page = 1,
        PageSize = 16
    };

    protected override async Task OnInitializedAsync()
    {
    }

    private bool IsStoreLogoRectangular(Store store)
    {
        return store == Store.Kaufland;
    }

    private async ValueTask<ItemsProviderResult<Promotion>> FetchPromotions(ItemsProviderRequest request)
    {
        this.BrowsePromotionsRequest.Take = request.Count;
        this.BrowsePromotionsRequest.Skip = request.StartIndex;
        var fetchedPromotions = await promotionsClient.BrowsePromotionsAsync(BrowsePromotionsRequest);
        this.BrowsePromotionsRequest.Page += 1;

        Console.WriteLine(new string('*', 60));

        return new ItemsProviderResult<Promotion>(fetchedPromotions.Promotions, fetchedPromotions.TotalPromotionsCount);
    }

    private async Task TryRemoveFromShoppingList(Promotion promotion)
    {
        var dialogReference = this.dialogService.Show<ConfirmActionDialog>("Искате ли да премахнете продукта от кошницата?");
        var dialogResult = await dialogReference.Result;

        if (!dialogResult.Cancelled)
        {
            applicationState.RemoveFromShoppingList(promotion);
        }
    }

    private async Task AddToCart(Promotion promotion)
    {
        await applicationState.AddPromotionalItemToShoppingList(promotion);
    }
}