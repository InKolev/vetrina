@page "/"
@page "/promotions/search"

@using Blazored.LocalStorage
@using System.Diagnostics
@using Vetrina.Autogen.API.Client.Contracts
@using Vetrina.Client.Services

@inject ApplicationState applicationState;
@inject ISnackbar snackbarService;
@inject ILocalStorageService localStorageService;
@inject IDialogService dialogService;
@inject IPromotionsClient promotionsClient;
@inject IShoppingListRepository shoppingListRepository;
@inject IShoppingListService shoppingListService;

<MudContainer Class="mt-12">
    <MudText Align="Align.Center">
        <img src="/resources/Salad.svg" style="height: 140px;" />
    </MudText>
    <MudGrid>
        <MudItem md="2" lg="2" xl="2"></MudItem>
        <MudItem xs="12" sm="12" md="8" lg="8" xl="8">
            <MudGrid>
                <MudItem sm="1" md="1"></MudItem>
                <MudItem xs="12" sm="10" md="10">
                    <MudTextField DebounceInterval="400"
                                  OnAdornmentClick="() => SearchAsync(SearchPromotionsRequest.SearchTerm)"
                                  OnDebounceIntervalElapsed="SearchAsync"
                                  @bind-Value="SearchPromotionsRequest.SearchTerm"
                                  Immediate="true"
                                  Label="Търси"
                                  Margin="Margin.Dense"
                                  FullWidth="true"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Filled.Search"
                                  AdornmentColor="Color.Secondary" />
                </MudItem>
                <MudItem sm="1" md="1"></MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="12" sm="12" md="12">
                    <MudCheckBox @bind-Checked="@SearchPromotionsRequest.IncludeKaufland"
                                 Label="Търси в Kaufland"
                                 Color="Color.Primary">
                    </MudCheckBox>
                    <MudCheckBox @bind-Checked="@SearchPromotionsRequest.IncludeLidl"
                                 Label="Търси в Lidl"
                                 Color="Color.Secondary">
                    </MudCheckBox>
                    <MudCheckBox @bind-Checked="@SearchPromotionsRequest.IncludeBilla"
                                 Label="Търси в Billa"
                                 Disabled="true"
                                 Color="Color.Primary">
                    </MudCheckBox>
                    <MudCheckBox @bind-Checked="@SearchPromotionsRequest.IncludeFantastiko"
                                 Label="Търси във Fantastiko"
                                 Disabled="true"
                                 Color="Color.Secondary">
                    </MudCheckBox>
                </MudItem>
            </MudGrid>
            <MudSlider @bind-Value="@SearchPromotionsRequest.MaxNumberOfDocs" Step="2" Max="100" Min="2" Color="Color.Primary"></MudSlider>

            @if (this.SearchPromotionsResponse != null)
            {
                <MudText Align="Align.Center" Typo="Typo.body2" Color="Color.Default" Style="opacity: 0.8; font-style: oblique;">
                    Върнати са @this.SearchPromotionsResponse.Documents.Count от общо @this.SearchPromotionsResponse.TotalHits резултати
                    за @(this.EndToEndLatencySecs) секунди
                </MudText>
            }
        </MudItem>
        <MudItem md="2" lg="2" xl="2"></MudItem>
    </MudGrid>
</MudContainer>

@if (this.SearchPromotionsResponse != null && this.SearchPromotionsResponse.Documents.Any())
{
    @if (this.LoadingSearchResults)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudGrid>
            @foreach (var promotion in this.SearchPromotionsResponse.Documents)
            {
                <MudItem xs="12" sm="6" md="4" lg="4" xl="3" xxl="2">
                    <MudCard Class="mx-4">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Elevation="2" Size="Size.Large"
                               Square="@(promotion.Document.Store == Store.Kaufland ? true : false)"
                               Image="@($"/resources/{promotion.Document.Store}.svg")">
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1" Align="Align.Left">
                                    <strong title="@promotion.Document.DescriptionRaw" class="cut-text">@promotion.Document.DescriptionRaw</strong>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardMedia Image="@promotion.Document.ImageUrl" Class="promotion-card-small" />
                        <MudCardContent>
                            @*<img src="@promotion.Document.ImageUrl" class="promotion-card-small" >*@
                            @if (this.shoppingList.Any(x => x.Promotion.Id == promotion.Document.Id))
                            {
                                <MudButton OnClick="() => TryRemoveFromShoppingList(promotion.Document)"
                           StartIcon="@Icons.Material.Outlined.Remove"
                           FullWidth="true"
                           Size="Size.Large"
                           Color="Color.Warning"
                           Variant="Variant.Text"
                           Style="box-shadow: 0px 0px 10px rgba(245, 148, 39, 0.8);">
                                    <strong>@($"{promotion.Document.Price} BGN")</strong>
                                </MudButton>
                            }
                            else
                            {
                                <MudButton OnClick="() => AddToCart(promotion.Document)"
                           StartIcon="@Icons.Material.Outlined.Add"
                           FullWidth="true"
                           Size="Size.Large"
                           Color="Color.Transparent"
                           Variant="Variant.Text"
                           Style="box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);"
                           Class="@applicationState.TossToCartClass">
                                    <strong>@($"{promotion.Document.Price} BGN")</strong>
                                    <span class="cart-item"></span>
                                </MudButton>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
}

@code
{
    private List<ShoppingListItem> shoppingList = new List<ShoppingListItem>();

    public Random PseudoRandomGenerator = new Random();

    public List<string> DefaultSearchTerms =
        new()
            {
                "file",
                "shokolad",
                "plod",
                "bira",
                "vino",
                "meso",
                "pile",
                "sirene",
                "svinsko",
                "riba"
            };

    public SearchPromotionsRequest SearchPromotionsRequest { get; set; } =
        new SearchPromotionsRequest
            {
                MaxNumberOfDocs = 24
            };

    public LuceneSearchResponseOfPromotion SearchPromotionsResponse { get; set; }

    public bool LoadingSearchResults { get; set; } = false;

    public Stopwatch Stopwatch { get; set; } = Stopwatch.StartNew();

    public double EndToEndLatencySecs { get; set; }
    public double NetworkLatencySecs { get; set; }
    public double ServerProcessingTimeSecs { get; set; }

    Color color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }

    public async Task TriggerSearchOnEnterKeyPressed(KeyboardEventArgs e, string searchTerm)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SearchAsync(searchTerm);
        }
    }

    public async Task SearchAsync(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return;
        }

        this.LoadingSearchResults = true;
        this.SearchPromotionsRequest.SearchTerm = searchTerm;

        this.Stopwatch.Restart();

        try
        {
            this.SearchPromotionsResponse = await this.promotionsClient.SearchPromotionsAsync(SearchPromotionsRequest);

            this.Stopwatch.Stop();

            this.EndToEndLatencySecs = Math.Round(this.Stopwatch.Elapsed.TotalMilliseconds / 1000, 2, MidpointRounding.AwayFromZero);
            this.ServerProcessingTimeSecs = Math.Round(this.SearchPromotionsResponse.ProcessingTimeMs / 1000, 2, MidpointRounding.AwayFromZero);
            this.NetworkLatencySecs = Math.Round(this.EndToEndLatencySecs - this.ServerProcessingTimeSecs, 2, MidpointRounding.AwayFromZero);
        }
        catch (Exception e)
        {
            this.snackbarService.Clear();
            this.snackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbarService.Configuration.SnackbarVariant = Variant.Outlined;
            this.snackbarService.Add("Failed while searching for promotions...", Severity.Error);
            this.snackbarService.Add($"Reason: {e.Message}", Severity.Error);
        }

        this.LoadingSearchResults = false;
    }

    protected override async Task OnInitializedAsync()
    {
        this.shoppingList = await this.shoppingListRepository.GetAllItemsAsync();

        await this.SearchAsync(DefaultSearchTerms[PseudoRandomGenerator.Next(0, DefaultSearchTerms.Count)]);

        this.applicationState.ThemeColorChanged += StateHasChanged;
        this.applicationState.ShoppingListChanged += HandleStateHasChanged;
    }

    public void Dispose()
    {
        this.applicationState.ThemeColorChanged -= StateHasChanged;
        this.applicationState.ShoppingListChanged -= HandleStateHasChanged;
    }

    private async Task TryRemoveFromShoppingList(Promotion promotion)
    {
        var dialogReference = this.dialogService.Show<ConfirmActionDialog>("Искате ли да премахнете продукта от кошницата?");
        var dialogResult = await dialogReference.Result;

        if (!dialogResult.Cancelled)
        {
            await this.shoppingListService.RemoveFromShoppingList(promotion);
        }
    }

    private async Task AddToCart(Promotion promotion)
    {
        await this.shoppingListService.AddPromotionalItemToShoppingList(promotion);
    }

    public void HandleStateHasChanged(List<ShoppingListItem> shoppingListState)
    {
        this.shoppingList = shoppingListState;
        this.StateHasChanged();
    }
}
